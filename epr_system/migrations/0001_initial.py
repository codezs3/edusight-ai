# Generated by Django 5.2.5 on 2025-08-28 18:01

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import epr_system.data_models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EPRConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='default', max_length=100, unique=True)),
                ('academic_weight', models.DecimalField(decimal_places=2, default=40.0, max_digits=5)),
                ('psychological_weight', models.DecimalField(decimal_places=2, default=30.0, max_digits=5)),
                ('physical_weight', models.DecimalField(decimal_places=2, default=30.0, max_digits=5)),
                ('thriving_threshold', models.DecimalField(decimal_places=2, default=85.0, max_digits=5)),
                ('healthy_threshold', models.DecimalField(decimal_places=2, default=70.0, max_digits=5)),
                ('support_threshold', models.DecimalField(decimal_places=2, default=50.0, max_digits=5)),
                ('age_group', models.CharField(default='general', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='AcademicAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('standardized_test_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('gpa_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('attendance_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('engagement_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('learning_pace_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('teacher_evaluation', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('homework_completion_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('class_participation', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('composite_academic_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assessor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='conducted_academic_assessments', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='academic_assessments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-assessment_date'],
            },
        ),
        migrations.CreateModel(
            name='DataUpload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=epr_system.data_models.get_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['csv', 'xlsx', 'xls', 'pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png', 'gif', 'bmp'])])),
                ('original_filename', models.CharField(max_length=255)),
                ('file_size', models.PositiveIntegerField(help_text='File size in bytes')),
                ('file_type', models.CharField(choices=[('csv', 'CSV File'), ('excel', 'Excel File'), ('pdf', 'PDF Document'), ('doc', 'Word Document'), ('image', 'Image File'), ('other', 'Other')], max_length=20)),
                ('upload_type', models.CharField(choices=[('academic', 'Academic Data'), ('psychological', 'Psychological Data'), ('physical', 'Physical Health Data'), ('report_card', 'Report Card'), ('medical_report', 'Medical Report'), ('assessment_result', 'Assessment Result'), ('other', 'Other')], max_length=20)),
                ('academic_year', models.CharField(blank=True, max_length=20)),
                ('description', models.TextField(blank=True)),
                ('processing_status', models.CharField(choices=[('pending', 'Pending Processing'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('needs_review', 'Needs Manual Review')], default='pending', max_length=20)),
                ('processing_notes', models.TextField(blank=True)),
                ('extracted_data', models.JSONField(default=dict, help_text='Data extracted from file')),
                ('validation_errors', models.JSONField(default=list, help_text='Validation errors found')),
                ('ocr_text', models.TextField(blank=True, help_text='OCR extracted text')),
                ('ai_extracted_fields', models.JSONField(default=dict, help_text='AI extracted structured data')),
                ('confidence_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_uploads', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DataValidationIssue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issue_type', models.CharField(choices=[('missing_data', 'Missing Required Data'), ('invalid_value', 'Invalid Value'), ('duplicate_entry', 'Duplicate Entry'), ('inconsistent_data', 'Inconsistent Data'), ('format_error', 'Format Error'), ('range_error', 'Value Out of Range'), ('other', 'Other Issue')], max_length=20)),
                ('severity', models.CharField(choices=[('low', 'Low - Optional Fix'), ('medium', 'Medium - Recommended Fix'), ('high', 'High - Should Fix'), ('critical', 'Critical - Must Fix')], max_length=10)),
                ('status', models.CharField(choices=[('open', 'Open'), ('in_progress', 'In Progress'), ('resolved', 'Resolved'), ('dismissed', 'Dismissed')], default='open', max_length=20)),
                ('data_category', models.CharField(choices=[('academic', 'Academic'), ('psychological', 'Psychological'), ('physical', 'Physical')], max_length=20)),
                ('field_name', models.CharField(max_length=100)),
                ('current_value', models.TextField(blank=True)),
                ('suggested_value', models.TextField(blank=True)),
                ('description', models.TextField()),
                ('resolution_notes', models.TextField(blank=True)),
                ('object_id', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='validation_issues', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['severity', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PsychologicalAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('sdq_emotional_symptoms', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('sdq_conduct_problems', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('sdq_hyperactivity', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('sdq_peer_problems', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('sdq_prosocial', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('dass_depression', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(42)])),
                ('dass_anxiety', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(42)])),
                ('dass_stress', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(42)])),
                ('perma_positive_emotion', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('perma_engagement', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('perma_relationships', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('perma_meaning', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('perma_achievement', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('self_esteem_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('social_skills_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('emotional_regulation_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('composite_psychological_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assessor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='conducted_psychological_assessments', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='psychological_assessments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-assessment_date'],
            },
        ),
        migrations.CreateModel(
            name='StudentDataProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_data_complete', models.BooleanField(default=False)),
                ('psychological_data_complete', models.BooleanField(default=False)),
                ('physical_data_complete', models.BooleanField(default=False)),
                ('data_sources', models.JSONField(default=list, help_text='List of data sources (manual, upload, api)')),
                ('academic_years', models.JSONField(default=list, help_text='List of academic years with data')),
                ('current_academic_year', models.CharField(blank=True, max_length=20)),
                ('last_data_update', models.DateTimeField(auto_now=True)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('refunded', 'Refunded'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('plan_type', models.CharField(choices=[('basic', 'Basic - ₹499'), ('gold', 'Gold - ₹899'), ('platinum', 'Platinum - ₹1499'), ('corporate', 'Corporate - ₹25000')], default='basic', max_length=20)),
                ('access_expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='data_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PsychologicalDataEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_date', models.DateField(default=django.utils.timezone.now)),
                ('academic_year', models.CharField(max_length=20)),
                ('assessment_category', models.CharField(choices=[('cognitive', 'Cognitive Assessment'), ('emotional', 'Emotional Intelligence'), ('behavioral', 'Behavioral Assessment'), ('personality', 'Personality Test'), ('learning_style', 'Learning Style'), ('stress_anxiety', 'Stress & Anxiety'), ('social_skills', 'Social Skills'), ('motivation', 'Motivation Level'), ('self_esteem', 'Self Esteem'), ('other', 'Other')], max_length=20)),
                ('assessment_name', models.CharField(max_length=100)),
                ('sdq_emotional_symptoms', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('sdq_conduct_problems', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('sdq_hyperactivity', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('sdq_peer_problems', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('sdq_prosocial', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('dass_depression', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(42)])),
                ('dass_anxiety', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(42)])),
                ('dass_stress', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(42)])),
                ('perma_positive_emotion', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('perma_engagement', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('perma_relationships', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('perma_meaning', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('perma_achievement', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('custom_scores', models.JSONField(default=dict, help_text='Custom assessment scores')),
                ('scale_type', models.CharField(choices=[('likert_5', '1-5 Likert Scale'), ('likert_7', '1-7 Likert Scale'), ('percentage', 'Percentage (0-100)'), ('binary', 'Yes/No'), ('custom', 'Custom Scale')], default='percentage', max_length=20)),
                ('behavioral_observations', models.TextField(blank=True)),
                ('mood_patterns', models.JSONField(default=dict)),
                ('sleep_patterns', models.JSONField(default=dict)),
                ('social_interactions', models.TextField(blank=True)),
                ('assessor_name', models.CharField(blank=True, max_length=100)),
                ('assessment_environment', models.CharField(blank=True, max_length=100)),
                ('assessment_duration_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('data_source', models.CharField(choices=[('manual', 'Manual Entry'), ('upload', 'File Upload'), ('survey', 'Online Survey'), ('interview', 'Interview')], default='manual', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source_file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='epr_system.dataupload')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='psychological_entries', to=settings.AUTH_USER_MODEL)),
                ('data_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='psychological_entries', to='epr_system.studentdataprofile')),
            ],
            options={
                'ordering': ['-assessment_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PhysicalDataEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('measurement_date', models.DateField(default=django.utils.timezone.now)),
                ('academic_year', models.CharField(max_length=20)),
                ('measurement_type', models.CharField(choices=[('anthropometric', 'Height/Weight/BMI'), ('fitness', 'Fitness Assessment'), ('health_checkup', 'Health Checkup'), ('sports_performance', 'Sports Performance'), ('nutrition', 'Nutrition Assessment'), ('activity_tracking', 'Activity Tracking'), ('other', 'Other')], max_length=20)),
                ('height_cm', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(250)])),
                ('weight_kg', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(200)])),
                ('bmi', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(50)])),
                ('bmi_percentile', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('cardiovascular_fitness', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('muscular_strength', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('flexibility', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('endurance', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('push_ups_count', models.PositiveIntegerField(blank=True, null=True)),
                ('sit_ups_count', models.PositiveIntegerField(blank=True, null=True)),
                ('run_time_minutes', models.FloatField(blank=True, null=True)),
                ('run_distance_meters', models.FloatField(blank=True, null=True)),
                ('blood_pressure_systolic', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(60), django.core.validators.MaxValueValidator(200)])),
                ('blood_pressure_diastolic', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(40), django.core.validators.MaxValueValidator(120)])),
                ('heart_rate_bpm', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(200)])),
                ('daily_activity_hours', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(24)])),
                ('sleep_hours_per_night', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(24)])),
                ('screen_time_hours', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(24)])),
                ('nutrition_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('water_intake_liters', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('meal_regularity_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('sports_activities', models.JSONField(default=list, help_text='List of sports/activities participated')),
                ('activity_frequency', models.JSONField(default=dict, help_text='Frequency of different activities')),
                ('medical_conditions', models.JSONField(default=list, help_text='List of medical conditions')),
                ('medications', models.JSONField(default=list, help_text='List of medications')),
                ('allergies', models.JSONField(default=list, help_text='List of allergies')),
                ('measured_by', models.CharField(blank=True, max_length=100)),
                ('measurement_location', models.CharField(blank=True, max_length=100)),
                ('equipment_used', models.TextField(blank=True)),
                ('data_source', models.CharField(choices=[('manual', 'Manual Entry'), ('upload', 'File Upload'), ('device', 'Wearable Device'), ('medical', 'Medical Report')], default='manual', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source_file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='epr_system.dataupload')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='physical_entries', to=settings.AUTH_USER_MODEL)),
                ('data_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='physical_entries', to='epr_system.studentdataprofile')),
            ],
            options={
                'ordering': ['-measurement_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AcademicDataEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_year', models.CharField(max_length=20)),
                ('class_grade', models.CharField(max_length=10)),
                ('subject', models.CharField(choices=[('mathematics', 'Mathematics'), ('science', 'Science'), ('english', 'English'), ('social_studies', 'Social Studies'), ('hindi', 'Hindi'), ('computer_science', 'Computer Science'), ('physics', 'Physics'), ('chemistry', 'Chemistry'), ('biology', 'Biology'), ('history', 'History'), ('geography', 'Geography'), ('economics', 'Economics'), ('arts', 'Arts'), ('physical_education', 'Physical Education'), ('other', 'Other')], max_length=30)),
                ('assessment_type', models.CharField(choices=[('unit_test', 'Unit Test'), ('mid_term', 'Mid Term Exam'), ('final_exam', 'Final Exam'), ('quarterly', 'Quarterly Assessment'), ('half_yearly', 'Half Yearly'), ('annual', 'Annual Exam'), ('project', 'Project Work'), ('assignment', 'Assignment'), ('practical', 'Practical Exam'), ('other', 'Other')], max_length=20)),
                ('marks_obtained', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('total_marks', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('percentage', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('grade', models.CharField(blank=True, max_length=5)),
                ('class_rank', models.PositiveIntegerField(blank=True, null=True)),
                ('total_students', models.PositiveIntegerField(blank=True, null=True)),
                ('class_average', models.FloatField(blank=True, null=True)),
                ('attendance_percentage', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('homework_completion', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('class_participation', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('teacher_comments', models.TextField(blank=True)),
                ('improvement_areas', models.JSONField(default=list)),
                ('strengths', models.JSONField(default=list)),
                ('data_source', models.CharField(choices=[('manual', 'Manual Entry'), ('upload', 'File Upload'), ('api', 'API Import')], default='manual', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='academic_entries', to=settings.AUTH_USER_MODEL)),
                ('source_file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='epr_system.dataupload')),
                ('data_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='academic_entries', to='epr_system.studentdataprofile')),
            ],
            options={
                'ordering': ['-academic_year', 'subject', '-created_at'],
                'unique_together': {('student', 'academic_year', 'subject', 'assessment_type')},
            },
        ),
        migrations.CreateModel(
            name='YearwiseDataSummary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_year', models.CharField(max_length=20)),
                ('academic_data_count', models.PositiveIntegerField(default=0)),
                ('psychological_data_count', models.PositiveIntegerField(default=0)),
                ('physical_data_count', models.PositiveIntegerField(default=0)),
                ('overall_academic_average', models.FloatField(blank=True, null=True)),
                ('best_subjects', models.JSONField(default=list)),
                ('improvement_needed_subjects', models.JSONField(default=list)),
                ('attendance_average', models.FloatField(blank=True, null=True)),
                ('stress_level_average', models.FloatField(blank=True, null=True)),
                ('emotional_wellbeing_score', models.FloatField(blank=True, null=True)),
                ('social_skills_score', models.FloatField(blank=True, null=True)),
                ('fitness_level', models.FloatField(blank=True, null=True)),
                ('health_indicators', models.JSONField(default=dict)),
                ('activity_level', models.FloatField(blank=True, null=True)),
                ('annual_epr_score', models.FloatField(blank=True, null=True)),
                ('epr_performance_band', models.CharField(blank=True, max_length=20)),
                ('improvement_trends', models.JSONField(default=dict)),
                ('areas_of_concern', models.JSONField(default=list)),
                ('recommendations', models.JSONField(default=list)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='yearly_summaries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-academic_year'],
                'unique_together': {('student', 'academic_year')},
            },
        ),
    ]
