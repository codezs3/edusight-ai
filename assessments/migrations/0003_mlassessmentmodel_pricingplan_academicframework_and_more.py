# Generated by Django 5.2.5 on 2025-08-29 15:43

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('assessments', '0002_initial'),
        ('students', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MLAssessmentModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('model_type', models.CharField(choices=[('academic_predictor', 'Academic Performance Predictor'), ('behavioral_analyzer', 'Behavioral Pattern Analyzer'), ('career_recommender', 'Career Recommendation Engine'), ('learning_style', 'Learning Style Classifier'), ('risk_identifier', 'At-Risk Student Identifier'), ('skill_assessor', 'Skill Level Assessor'), ('personality_analyzer', 'Personality Trait Analyzer'), ('potential_predictor', 'Potential Development Predictor')], max_length=30)),
                ('algorithm_type', models.CharField(choices=[('random_forest', 'Random Forest'), ('neural_network', 'Neural Network'), ('svm', 'Support Vector Machine'), ('gradient_boosting', 'Gradient Boosting'), ('decision_tree', 'Decision Tree'), ('naive_bayes', 'Naive Bayes'), ('ensemble', 'Ensemble Method')], max_length=20)),
                ('version', models.CharField(default='1.0', max_length=10)),
                ('accuracy_score', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True)),
                ('training_data_size', models.IntegerField(default=0)),
                ('feature_importance', models.JSONField(default=dict)),
                ('model_parameters', models.JSONField(default=dict)),
                ('validation_metrics', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('is_trained', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='PricingPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('plan_type', models.CharField(choices=[('basic', 'Basic Plan'), ('premium', 'Premium Plan'), ('enterprise', 'Enterprise Plan')], max_length=20)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('duration_months', models.IntegerField(default=12)),
                ('academic_assessments', models.BooleanField(default=True)),
                ('physical_assessments', models.BooleanField(default=False)),
                ('psychological_assessments', models.BooleanField(default=False)),
                ('career_mapping', models.BooleanField(default=False)),
                ('ml_predictions', models.BooleanField(default=False)),
                ('advanced_analytics', models.BooleanField(default=False)),
                ('custom_reports', models.BooleanField(default=False)),
                ('priority_support', models.BooleanField(default=False)),
                ('max_students', models.IntegerField(default=1)),
                ('max_assessments_per_month', models.IntegerField(default=5)),
                ('max_reports_per_month', models.IntegerField(default=2)),
                ('features_list', models.JSONField(default=list)),
                ('limitations', models.JSONField(default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='AcademicFramework',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('framework_type', models.CharField(choices=[('cbse', 'CBSE (Central Board of Secondary Education)'), ('icse', 'ICSE (Indian Certificate of Secondary Education)'), ('ib', 'IB (International Baccalaureate)'), ('igcse', 'IGCSE (International General Certificate of Secondary Education)'), ('cambridge', 'Cambridge International'), ('state_board', 'State Board'), ('ncert', 'NCERT Framework'), ('nep_2020', 'NEP 2020 Framework')], max_length=20)),
                ('grade_level', models.CharField(choices=[('nursery', 'Nursery'), ('lkg', 'LKG'), ('ukg', 'UKG'), ('grade_1', 'Grade 1'), ('grade_2', 'Grade 2'), ('grade_3', 'Grade 3'), ('grade_4', 'Grade 4'), ('grade_5', 'Grade 5'), ('grade_6', 'Grade 6'), ('grade_7', 'Grade 7'), ('grade_8', 'Grade 8'), ('grade_9', 'Grade 9'), ('grade_10', 'Grade 10'), ('grade_11', 'Grade 11'), ('grade_12', 'Grade 12')], max_length=20)),
                ('subject_areas', models.JSONField(default=list)),
                ('learning_objectives', models.JSONField(default=dict)),
                ('assessment_criteria', models.JSONField(default=dict)),
                ('competency_levels', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'unique_together': {('framework_type', 'grade_level')},
            },
        ),
        migrations.CreateModel(
            name='AssessmentWorkflow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('workflow_type', models.CharField(choices=[('basic_academic', 'Basic Academic Assessment'), ('premium_comprehensive', 'Premium Comprehensive Assessment'), ('enterprise_advanced', 'Enterprise Advanced Assessment')], max_length=30)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('in_progress', 'In Progress'), ('review', 'Under Review'), ('completed', 'Completed'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('current_step', models.IntegerField(default=1)),
                ('total_steps', models.IntegerField(default=5)),
                ('workflow_config', models.JSONField(default=dict)),
                ('assessment_data', models.JSONField(default=dict)),
                ('results', models.JSONField(default=dict)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='students.student')),
                ('pricing_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessments.pricingplan')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AssessmentReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('basic', 'Basic Report'), ('comprehensive', 'Comprehensive Report'), ('detailed', 'Detailed Report'), ('custom', 'Custom Report')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('report_data', models.JSONField(default=dict)),
                ('summary', models.TextField(blank=True)),
                ('recommendations', models.JSONField(default=list)),
                ('pdf_file', models.FileField(blank=True, null=True, upload_to='assessment_reports/')),
                ('file_size', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('generating', 'Generating'), ('completed', 'Completed'), ('failed', 'Failed')], default='generating', max_length=20)),
                ('generated_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessments.assessmentworkflow')),
            ],
        ),
        migrations.CreateModel(
            name='CareerMappingFramework',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('framework_type', models.CharField(choices=[('holland_riasec', 'Holland RIASEC Model'), ('super_career', 'Super Career Development Theory'), ('gottfredson', 'Gottfredson Theory'), ('social_cognitive', 'Social Cognitive Career Theory'), ('values_based', 'Values-Based Career Framework'), ('skills_based', 'Skills-Based Career Mapping'), ('personality_career', 'Personality-Career Fit Model'), ('industry_4_0', 'Industry 4.0 Career Framework')], max_length=30)),
                ('target_education_level', models.CharField(choices=[('high_school', 'High School'), ('undergraduate', 'Undergraduate'), ('graduate', 'Graduate'), ('professional', 'Professional'), ('vocational', 'Vocational Training')], max_length=20)),
                ('career_clusters', models.JSONField(default=dict)),
                ('skill_requirements', models.JSONField(default=dict)),
                ('personality_matches', models.JSONField(default=dict)),
                ('market_trends', models.JSONField(default=dict)),
                ('education_pathways', models.JSONField(default=dict)),
                ('salary_information', models.JSONField(default=dict)),
                ('growth_projections', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'unique_together': {('framework_type', 'target_education_level')},
            },
        ),
        migrations.CreateModel(
            name='PhysicalEducationFramework',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('framework_type', models.CharField(choices=[('fitness_gram', 'FitnessGram'), ('presidential', 'Presidential Youth Fitness'), ('eurofit', 'Eurofit'), ('aahperd', 'AAHPERD Health Related Fitness'), ('cooper', 'Cooper Institute Standards'), ('indian_fitness', 'Indian Fitness Standards'), ('who_standards', 'WHO Physical Activity Standards')], max_length=20)),
                ('age_group', models.CharField(choices=[('5-7', '5-7 years'), ('8-10', '8-10 years'), ('11-13', '11-13 years'), ('14-16', '14-16 years'), ('17-18', '17-18 years')], max_length=10)),
                ('fitness_components', models.JSONField(default=dict)),
                ('motor_skills', models.JSONField(default=dict)),
                ('assessment_tests', models.JSONField(default=dict)),
                ('health_indicators', models.JSONField(default=dict)),
                ('performance_standards', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'unique_together': {('framework_type', 'age_group')},
            },
        ),
        migrations.CreateModel(
            name='AssessmentForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('form_type', models.CharField(choices=[('academic_basic', 'Basic Academic Form'), ('academic_premium', 'Premium Academic Form'), ('academic_enterprise', 'Enterprise Academic Form'), ('physical_premium', 'Premium Physical Form'), ('physical_enterprise', 'Enterprise Physical Form'), ('psychological_premium', 'Premium Psychological Form'), ('psychological_enterprise', 'Enterprise Psychological Form'), ('career_premium', 'Premium Career Form'), ('career_enterprise', 'Enterprise Career Form')], max_length=30)),
                ('form_schema', models.JSONField(default=dict)),
                ('validation_rules', models.JSONField(default=dict)),
                ('scoring_configuration', models.JSONField(default=dict)),
                ('description', models.TextField(blank=True)),
                ('estimated_time', models.IntegerField(default=15)),
                ('version', models.CharField(default='1.0', max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('pricing_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessments.pricingplan')),
            ],
        ),
        migrations.CreateModel(
            name='PsychologicalFramework',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('framework_type', models.CharField(choices=[('gardner_mi', 'Gardner Multiple Intelligences'), ('bloom_taxonomy', "Bloom's Taxonomy"), ('eq_framework', 'Emotional Intelligence Framework'), ('big_five', 'Big Five Personality Traits'), ('sternberg_triarchic', 'Sternberg Triarchic Theory'), ('goleman_ei', 'Goleman Emotional Intelligence'), ('sel_framework', 'Social Emotional Learning'), ('resilience_framework', 'Resilience Assessment'), ('mindset_framework', 'Growth Mindset Assessment')], max_length=30)),
                ('developmental_stage', models.CharField(choices=[('early_childhood', 'Early Childhood (3-6 years)'), ('middle_childhood', 'Middle Childhood (7-11 years)'), ('adolescence', 'Adolescence (12-18 years)'), ('young_adult', 'Young Adult (19-25 years)')], max_length=20)),
                ('cognitive_domains', models.JSONField(default=dict)),
                ('emotional_domains', models.JSONField(default=dict)),
                ('social_domains', models.JSONField(default=dict)),
                ('behavioral_indicators', models.JSONField(default=dict)),
                ('assessment_methods', models.JSONField(default=dict)),
                ('intervention_strategies', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'unique_together': {('framework_type', 'developmental_stage')},
            },
        ),
        migrations.CreateModel(
            name='ComprehensiveAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_type', models.CharField(choices=[('initial', 'Initial Assessment'), ('periodic', 'Periodic Review'), ('progress', 'Progress Assessment'), ('diagnostic', 'Diagnostic Assessment'), ('comprehensive', 'Comprehensive Evaluation')], max_length=20)),
                ('academic_scores', models.JSONField(default=dict)),
                ('physical_scores', models.JSONField(default=dict)),
                ('psychological_scores', models.JSONField(default=dict)),
                ('career_interests', models.JSONField(default=dict)),
                ('ml_predictions', models.JSONField(default=dict)),
                ('confidence_scores', models.JSONField(default=dict)),
                ('overall_score', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('strengths', models.JSONField(default=list)),
                ('areas_for_improvement', models.JSONField(default=list)),
                ('recommendations', models.JSONField(default=list)),
                ('assessment_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_finalized', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('academic_framework', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessments.academicframework')),
                ('assessed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('career_framework', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='assessments.careermappingframework')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='students.student')),
                ('pe_framework', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='assessments.physicaleducationframework')),
                ('psychological_framework', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='assessments.psychologicalframework')),
            ],
            options={
                'ordering': ['-assessment_date'],
            },
        ),
        migrations.CreateModel(
            name='WorkflowStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step_number', models.IntegerField()),
                ('step_type', models.CharField(choices=[('data_upload', 'Data Upload'), ('academic_assessment', 'Academic Assessment'), ('physical_assessment', 'Physical Assessment'), ('psychological_assessment', 'Psychological Assessment'), ('ml_analysis', 'ML Analysis'), ('review_results', 'Review Results'), ('generate_report', 'Generate Report')], max_length=30)),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('skipped', 'Skipped')], default='pending', max_length=20)),
                ('is_required', models.BooleanField(default=True)),
                ('estimated_duration', models.IntegerField(default=10)),
                ('form_config', models.JSONField(default=dict)),
                ('validation_rules', models.JSONField(default=dict)),
                ('step_data', models.JSONField(default=dict)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='steps', to='assessments.assessmentworkflow')),
            ],
            options={
                'ordering': ['step_number'],
                'unique_together': {('workflow', 'step_number')},
            },
        ),
        migrations.CreateModel(
            name='FormSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_data', models.JSONField(default=dict)),
                ('calculated_scores', models.JSONField(default=dict)),
                ('validation_errors', models.JSONField(default=list)),
                ('is_valid', models.BooleanField(default=False)),
                ('is_submitted', models.BooleanField(default=False)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessments.assessmentform')),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessments.assessmentworkflow')),
                ('step', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='assessments.workflowstep')),
            ],
        ),
    ]
